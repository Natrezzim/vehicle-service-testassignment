/*
 * This file is generated by jOOQ.
 */
package ru.testassignment.vehicleservice.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import ru.testassignment.vehicleservice.jooq.Keys;
import ru.testassignment.vehicleservice.jooq.Public;
import ru.testassignment.vehicleservice.jooq.tables.records.VehiclesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Vehicles extends TableImpl<VehiclesRecord> {

  /**
   * The reference instance of <code>public.vehicles</code>
   */
  public static final Vehicles VEHICLES = new Vehicles();
  private static final long serialVersionUID = 1L;
  /**
   * The column <code>public.vehicles.id</code>.
   */
  public final TableField<VehiclesRecord, Long> ID = createField(DSL.name("id"),
      SQLDataType.BIGINT.nullable(false).identity(true), this, "");
  /**
   * The column <code>public.vehicles.owner_id</code>. Id владельца
   */
  public final TableField<VehiclesRecord, Integer> OWNER_ID = createField(DSL.name("owner_id"),
      SQLDataType.INTEGER, this, "Id владельца");
  /**
   * The column <code>public.vehicles.brand_id</code>. Id бренда
   */
  public final TableField<VehiclesRecord, Integer> BRAND_ID = createField(DSL.name("brand_id"),
      SQLDataType.INTEGER, this, "Id бренда");
  /**
   * The column <code>public.vehicles.model_id</code>. Id модели
   */
  public final TableField<VehiclesRecord, Integer> MODEL_ID = createField(DSL.name("model_id"),
      SQLDataType.INTEGER, this, "Id модели");
  /**
   * The column <code>public.vehicles.created_at</code>.
   */
  public final TableField<VehiclesRecord, LocalDateTime> CREATED_AT = createField(
      DSL.name("created_at"),
      SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)),
      this, "");
  private transient Owners _owners;
  private transient Brands _brands;
  private transient Models _models;

  private Vehicles(Name alias, Table<VehiclesRecord> aliased) {
    this(alias, aliased, null);
  }

  private Vehicles(Name alias, Table<VehiclesRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>public.vehicles</code> table reference
   */
  public Vehicles(String alias) {
    this(DSL.name(alias), VEHICLES);
  }

  /**
   * Create an aliased <code>public.vehicles</code> table reference
   */
  public Vehicles(Name alias) {
    this(alias, VEHICLES);
  }

  /**
   * Create a <code>public.vehicles</code> table reference
   */
  public Vehicles() {
    this(DSL.name("vehicles"), null);
  }

  public <O extends Record> Vehicles(Table<O> child, ForeignKey<O, VehiclesRecord> key) {
    super(child, key, VEHICLES);
  }

  /**
   * The class holding records for this type
   */
  @Override
  public Class<VehiclesRecord> getRecordType() {
    return VehiclesRecord.class;
  }

  @Override
  public Schema getSchema() {
    return Public.PUBLIC;
  }

  @Override
  public Identity<VehiclesRecord, Long> getIdentity() {
    return (Identity<VehiclesRecord, Long>) super.getIdentity();
  }

  @Override
  public UniqueKey<VehiclesRecord> getPrimaryKey() {
    return Keys.VEHICLES_PKEY;
  }

  @Override
  public List<UniqueKey<VehiclesRecord>> getKeys() {
    return Arrays.<UniqueKey<VehiclesRecord>>asList(Keys.VEHICLES_PKEY);
  }

  @Override
  public List<ForeignKey<VehiclesRecord, ?>> getReferences() {
    return Arrays.<ForeignKey<VehiclesRecord, ?>>asList(Keys.VEHICLES__VEHICLES_OWNER_ID_FKEY,
        Keys.VEHICLES__VEHICLES_BRAND_ID_FKEY, Keys.VEHICLES__VEHICLES_MODEL_ID_FKEY);
  }

  public Owners owners() {
    if (_owners == null) {
      _owners = new Owners(this, Keys.VEHICLES__VEHICLES_OWNER_ID_FKEY);
    }

    return _owners;
  }

  public Brands brands() {
    if (_brands == null) {
      _brands = new Brands(this, Keys.VEHICLES__VEHICLES_BRAND_ID_FKEY);
    }

    return _brands;
  }

  public Models models() {
    if (_models == null) {
      _models = new Models(this, Keys.VEHICLES__VEHICLES_MODEL_ID_FKEY);
    }

    return _models;
  }

  @Override
  public Vehicles as(String alias) {
    return new Vehicles(DSL.name(alias), this);
  }

  @Override
  public Vehicles as(Name alias) {
    return new Vehicles(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public Vehicles rename(String name) {
    return new Vehicles(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public Vehicles rename(Name name) {
    return new Vehicles(name, null);
  }

  // -------------------------------------------------------------------------
  // Row5 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row5<Long, Integer, Integer, Integer, LocalDateTime> fieldsRow() {
    return (Row5) super.fieldsRow();
  }
}

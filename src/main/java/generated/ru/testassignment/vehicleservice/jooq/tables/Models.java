/*
 * This file is generated by jOOQ.
 */
package ru.testassignment.vehicleservice.jooq.tables;


import java.util.Arrays;
import java.util.List;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import ru.testassignment.vehicleservice.jooq.Keys;
import ru.testassignment.vehicleservice.jooq.Public;
import ru.testassignment.vehicleservice.jooq.tables.records.ModelsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Models extends TableImpl<ModelsRecord> {

  /**
   * The reference instance of <code>public.models</code>
   */
  public static final Models MODELS = new Models();
  private static final long serialVersionUID = 1L;
  /**
   * The column <code>public.models.id</code>.
   */
  public final TableField<ModelsRecord, Integer> ID = createField(DSL.name("id"),
      SQLDataType.INTEGER.nullable(false).identity(true), this, "");
  /**
   * The column <code>public.models.name</code>. Название модели
   */
  public final TableField<ModelsRecord, String> NAME = createField(DSL.name("name"),
      SQLDataType.CLOB, this, "Название модели");
  /**
   * The column <code>public.models.characteristics</code>. Характеристики
   */
  public final TableField<ModelsRecord, String> CHARACTERISTICS = createField(
      DSL.name("characteristics"), SQLDataType.CLOB, this, "Характеристики");
  /**
   * The column <code>public.models.brand_id</code>. Id бренда
   */
  public final TableField<ModelsRecord, Integer> BRAND_ID = createField(DSL.name("brand_id"),
      SQLDataType.INTEGER, this, "Id бренда");
  private transient Brands _brands;

  private Models(Name alias, Table<ModelsRecord> aliased) {
    this(alias, aliased, null);
  }

  private Models(Name alias, Table<ModelsRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>public.models</code> table reference
   */
  public Models(String alias) {
    this(DSL.name(alias), MODELS);
  }

  /**
   * Create an aliased <code>public.models</code> table reference
   */
  public Models(Name alias) {
    this(alias, MODELS);
  }

  /**
   * Create a <code>public.models</code> table reference
   */
  public Models() {
    this(DSL.name("models"), null);
  }

  public <O extends Record> Models(Table<O> child, ForeignKey<O, ModelsRecord> key) {
    super(child, key, MODELS);
  }

  /**
   * The class holding records for this type
   */
  @Override
  public Class<ModelsRecord> getRecordType() {
    return ModelsRecord.class;
  }

  @Override
  public Schema getSchema() {
    return Public.PUBLIC;
  }

  @Override
  public Identity<ModelsRecord, Integer> getIdentity() {
    return (Identity<ModelsRecord, Integer>) super.getIdentity();
  }

  @Override
  public UniqueKey<ModelsRecord> getPrimaryKey() {
    return Keys.MODELS_PKEY;
  }

  @Override
  public List<UniqueKey<ModelsRecord>> getKeys() {
    return Arrays.<UniqueKey<ModelsRecord>>asList(Keys.MODELS_PKEY, Keys.MODELS_NAME_KEY);
  }

  @Override
  public List<ForeignKey<ModelsRecord, ?>> getReferences() {
    return Arrays.<ForeignKey<ModelsRecord, ?>>asList(Keys.MODELS__MODELS_BRAND_ID_FKEY);
  }

  public Brands brands() {
    if (_brands == null) {
      _brands = new Brands(this, Keys.MODELS__MODELS_BRAND_ID_FKEY);
    }

    return _brands;
  }

  @Override
  public Models as(String alias) {
    return new Models(DSL.name(alias), this);
  }

  @Override
  public Models as(Name alias) {
    return new Models(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public Models rename(String name) {
    return new Models(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public Models rename(Name name) {
    return new Models(name, null);
  }

  // -------------------------------------------------------------------------
  // Row4 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row4<Integer, String, String, Integer> fieldsRow() {
    return (Row4) super.fieldsRow();
  }
}
